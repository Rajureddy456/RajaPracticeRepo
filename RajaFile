 #!/bin/bash

# Set variables
APP_NAME="my-sample-app"
S3_BUCKET_NAME="${APP_NAME}-bucket-$(date +%s)"
REGION="us-west-2"
EC2_KEY_PAIR="${APP_NAME}-keypair"
LAUNCH_TEMPLATE_NAME="${APP_NAME}-launch-template"
SECURITY_GROUP_NAME="${APP_NAME}-sg"
INSTANCE_TYPE="t2.micro"
IMAGE_ID="ami-12345678" # Replace with a valid AMI ID in your region
LB_NAME="${APP_NAME}-lb"
ASG_NAME="${APP_NAME}-asg"
TARGET_GROUP_NAME="${APP_NAME}-tg"

# Step 1: Create an S3 bucket
echo "Creating S3 bucket for application assets..."
aws s3api create-bucket --bucket $S3_BUCKET_NAME --region $REGION --create-bucket-configuration LocationConstraint=$REGION
echo "S3 bucket created: $S3_BUCKET_NAME"

# Step 2: Create a security group
echo "Creating security group for EC2 instances..."
SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "Security group for $APP_NAME" --query 'GroupId' --output text)
aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
echo "Security group created with ID: $SECURITY_GROUP_ID"

# Step 3: Create a Key Pair
echo "Creating key pair for EC2 access..."
aws ec2 create-key-pair --key-name $EC2_KEY_PAIR --query 'KeyMaterial' --output text > ${EC2_KEY_PAIR}.pem
chmod 400 ${EC2_KEY_PAIR}.pem
echo "Key pair created: ${EC2_KEY_PAIR}.pem"

# Step 4: Create Launch Template
echo "Creating launch template for EC2 instances..."
aws ec2 create-launch-template --launch-template-name $LAUNCH_TEMPLATE_NAME --version-description "Version 1" --launch-template-data "{
  \"ImageId\": \"$IMAGE_ID\",
  \"InstanceType\": \"$INSTANCE_TYPE\",
  \"KeyName\": \"$EC2_KEY_PAIR\",
  \"SecurityGroupIds\": [\"$SECURITY_GROUP_ID\"]
}"
echo "Launch template created: $LAUNCH_TEMPLATE_NAME"

# Step 5: Create Target Group
echo "Creating target group for load balancing..."
TARGET_GROUP_ARN=$(aws elbv2 create-target-group --name $TARGET_GROUP_NAME --protocol HTTP --port 80 --vpc-id $(aws ec2 describe-vpcs --query "Vpcs[0].VpcId" --output text) --target-type instance --query 'TargetGroups[0].TargetGroupArn' --output text)
echo "Target group created: $TARGET_GROUP_NAME"

# Step 6: Create Load Balancer
echo "Creating load balancer..."
LB_ARN=$(aws elbv2 create-load-balancer --name $LB_NAME --subnets $(aws ec2 describe-subnets --query "Subnets[0].SubnetId" --output text) --security-groups $SECURITY_GROUP_ID --query 'LoadBalancers[0].LoadBalancerArn' --output text)
aws elbv2 create-listener --load-balancer-arn $LB_ARN --protocol HTTP --port 80 --default-actions Type=forward,TargetGroupArn=$TARGET_GROUP_ARN
echo "Load balancer created: $LB_NAME"

# Step 7: Create Auto Scaling Group
echo "Creating Auto Scaling Group..."
aws autoscaling create-auto-scaling-group --auto-scaling-group-name $ASG_NAME --launch-template LaunchTemplateName=$LAUNCH_TEMPLATE_NAME,Vers

